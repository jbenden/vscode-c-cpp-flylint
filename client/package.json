{
  "name": "c-cpp-flylint",
  "displayName": "C/C++ Advanced Lint",
  "description": "An advanced, modern, static analysis extension for C/C++ that supports a number of back-end analyzer programs.",
  "author": {
    "name": "Joseph Benden",
    "email": "joe@benden.us",
    "url": "http://benden.us/"
  },
  "publisher": "jbenden",
  "version": "1.2.4",
  "license": "MIT",
  "icon": "C-Cpp-FlyLint_icon.png",
  "galleryBanner": {
    "color": "#303f9f",
    "theme": "dark"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jbenden/vscode-c-cpp-flylint.git"
  },
  "bugs": {
    "url": "https://github.com/jbenden/vscode-c-cpp-flylint/issues",
    "email": "joe@benden.us"
  },
  "homepage": "https://github.com/jbenden/vscode-c-cpp-flylint/blob/master/README.md",
  "engines": {
    "vscode": "^1.41.1"
  },
  "categories": [
    "Programming Languages",
    "Linters"
  ],
  "keywords": [
    "c",
    "c++",
    "cppcheck",
    "flexelint",
    "clang",
    "lint",
    "linter"
  ],
  "activationEvents": [
    "onCommand:c-cpp-flylint.analyzeActiveDocument",
    "onCommand:c-cpp-flylint.analyzeWorkspace",
    "onLanguage:c",
    "onLanguage:cpp"
  ],
  "main": "./out/extension",
  "contributes": {
    "commands": [
      {
        "command": "c-cpp-flylint.analyzeActiveDocument",
        "title": "C/C++ Flylint: Analyze the active document"
      },
      {
        "command": "c-cpp-flylint.analyzeWorkspace",
        "title": "C/C++ Flylint: Analyze all documents opened in the workspace"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "C/C++ Lint configuration",
      "properties": {
        "c-cpp-flylint.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable all linting"
        },
        "c-cpp-flylint.debug": {
          "type": "boolean",
          "default": false,
          "description": "Enable or disable verbose debug logging"
        },
        "c-cpp-flylint.run": {
          "type": "string",
          "enum": [
            "onSave",
            "onType"
          ],
          "default": "onSave",
          "description": "Run the linter upon typing (onType), when possible, or on save (onSave)."
        },
        "c-cpp-flylint.ignoreParseErrors": {
          "type": "boolean",
          "default": false,
          "description": "Ignore when the extension can't parse a line of the linter."
        },
        "c-cpp-flylint.excludeFromWorkspacePaths": {
          "type": "array",
          "default": [],
          "description": "A list of paths within the workspace for which no analyses/diagnostics will be displayed."
        },
        "c-cpp-flylint.language": {
          "type": "string",
          "default": "c++",
          "enum": [
            "c",
            "c++"
          ],
          "description": "Force to check all files as the given language. Cascades to all analyzers unless overridden in one or more analyzers."
        },
        "c-cpp-flylint.standard": {
          "type": "array",
          "default": [
            "c11",
            "c++11"
          ],
          "description": "The language standards to check against. Cascades to all analyzers unless overridden in one or more analyzers."
        },
        "c-cpp-flylint.defines": {
          "type": "array",
          "default": [],
          "description": "Preprocessor symbols to define. Cascades to all analyzers unless overridden in one or more analyzers."
        },
        "c-cpp-flylint.undefines": {
          "type": "array",
          "default": [],
          "description": "Preprocessor symbols to undefine. Cascades to all analyzers unless overridden in one or more analyzers."
        },
        "c-cpp-flylint.includePaths": {
          "type": "array",
          "default": [],
          "description": "Paths to search for include files. They may be relative or absolute. Cascades to all analyzers unless overridden in one or more analyzers."
        },
        "c-cpp-flylint.clang.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable the Clang linter"
        },
        "c-cpp-flylint.clang.executable": {
          "type": "string",
          "description": "This option allows you to override the executable called when using Clang",
          "default": "clang"
        },
        "c-cpp-flylint.clang.configFile": {
          "type": "string",
          "description": "A .clang_complete file to use/fallback to if no config file is found in the current project",
          "default": ".clang_complete"
        },
        "c-cpp-flylint.clang.includePaths": {
          "type": [
            "array",
            "null"
          ],
          "default": null,
          "description": "Paths to search for include files. They may be relative or absolute."
        },
        "c-cpp-flylint.clang.standard": {
          "type": [
            "array",
            "null"
          ],
          "default": null,
          "description": "The language standards to check against. For example, one or more of: posix, c89, c99, c11, c++03, c++11, c++14, c++17."
        },
        "c-cpp-flylint.clang.defines": {
          "type": [
            "array",
            "null"
          ],
          "default": null,
          "description": "Preprocessor symbols to define."
        },
        "c-cpp-flylint.clang.undefines": {
          "type": [
            "array",
            "null"
          ],
          "default": null,
          "description": "Preprocessor symbols to undefine."
        },
        "c-cpp-flylint.clang.language": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "Force Clang to check all files as the given language."
        },
        "c-cpp-flylint.clang.extraArgs": {
          "type": [
            "array",
            "null"
          ],
          "default": null,
          "description": "Extra verbatim command-line arguments to include on the Clang command-line invocation."
        },
        "c-cpp-flylint.clang.warnings": {
          "type": [
            "array",
            "null"
          ],
          "default": [
            "all",
            "extra",
            "everything"
          ],
          "description": "Warnings to include in the analysis. Default is everything possible."
        },
        "c-cpp-flylint.clang.includes": {
          "type": [
            "array",
            "null"
          ],
          "default": null,
          "description": "An array of files to directly include with every processed file. Operates via utilizing Clang's -include parameter."
        },
        "c-cpp-flylint.clang.standardLibs": {
          "type": [
            "array",
            "null"
          ],
          "default": null,
          "description": "The standard libraries to utilize. Operates via utilizing Clang's -stdlib parameter. Some macOS and BSD systems need to use a special library for C++11 support."
        },
        "c-cpp-flylint.clang.pedantic": {
          "type": "boolean",
          "default": false,
          "description": "Enable or disable the -pedantic command-line argument to Clang."
        },
        "c-cpp-flylint.clang.pedanticErrors": {
          "type": "boolean",
          "default": false,
          "description": "Enable or disable the -pedantic-errors command-line argument to Clang."
        },
        "c-cpp-flylint.clang.msExtensions": {
          "type": "boolean",
          "default": false,
          "description": "Enable or disable the -fms-extensions command-line argument to Clang."
        },
        "c-cpp-flylint.clang.noExceptions": {
          "type": "boolean",
          "default": false,
          "description": "Enable or disable the -fno-exceptions command-line argument to Clang."
        },
        "c-cpp-flylint.clang.noRtti": {
          "type": "boolean",
          "default": false,
          "description": "Enable or disable the -fno-rtti command-line argument to Clang."
        },
        "c-cpp-flylint.clang.blocks": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable the -fblocks command-line argument to Clang."
        },
        "c-cpp-flylint.clang.severityLevels": {
          "type": "object",
          "description": "Maps the severity levels of Clang to VSCode severity levels (Error, Warning, Information, Hint). Setting to 'None' will not show the severity type at all.",
          "default": {
            "fatal": "Error",
            "error": "Error",
            "warning": "Warning",
            "note": "Information"
          },
          "properties": {
            "fatal": {
              "description": "Used when very major issues are found.",
              "type": "string",
              "default": "Error",
              "enum": [
                "Error",
                "Warning",
                "Hint",
                "Information",
                "None"
              ]
            },
            "error": {
              "description": "Used when major issues are found.",
              "type": "string",
              "default": "Error",
              "enum": [
                "Error",
                "Warning",
                "Hint",
                "Information",
                "None"
              ]
            },
            "warning": {
              "description": "Suggestions about defensive programming to prevent potential issues.",
              "type": "string",
              "default": "Warning",
              "enum": [
                "Error",
                "Warning",
                "Hint",
                "Information",
                "None"
              ]
            },
            "note": {
              "description": "Suggestions about (possibly) minor issues.",
              "type": "string",
              "default": "Information",
              "enum": [
                "Error",
                "Warning",
                "Hint",
                "Information",
                "None"
              ]
            }
          }
        },
        "c-cpp-flylint.cppcheck.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable the CppCheck linter"
        },
        "c-cpp-flylint.cppcheck.executable": {
          "type": "string",
          "description": "This option allows you to override the executable called when using CppCheck",
          "default": "cppcheck"
        },
        "c-cpp-flylint.cppcheck.configFile": {
          "type": "string",
          "description": "A .clang_complete file to use/fallback to if no config file is found in the current project",
          "default": ".clang_complete"
        },
        "c-cpp-flylint.cppcheck.includePaths": {
          "type": [
            "array",
            "null"
          ],
          "default": null,
          "description": "Paths to search for include files. They may be relative or absolute."
        },
        "c-cpp-flylint.cppcheck.platform": {
          "type": "string",
          "enum": [
            "avr8",
            "unix32",
            "unix64",
            "win32A",
            "win32W",
            "win64",
            "native"
          ],
          "default": "native",
          "description": "The platform used for types and sizes."
        },
        "c-cpp-flylint.cppcheck.standard": {
          "type": [
            "array",
            "null"
          ],
          "default": null,
          "description": "The language standards to check against. Can be one or more of: posix, c89, c99, c11, c++03, c++11."
        },
        "c-cpp-flylint.cppcheck.defines": {
          "type": [
            "array",
            "null"
          ],
          "default": null,
          "description": "Preprocessor symbols to define."
        },
        "c-cpp-flylint.cppcheck.undefines": {
          "type": [
            "array",
            "null"
          ],
          "default": null,
          "description": "Preprocessor symbols to undefine."
        },
        "c-cpp-flylint.cppcheck.suppressions": {
          "type": "array",
          "default": [],
          "description": "Warnings to suppress. Refer to the CppCheck documentation for what to supply here."
        },
        "c-cpp-flylint.cppcheck.verbose": {
          "type": "boolean",
          "default": false,
          "description": "Whether to enable verbose output from CppCheck."
        },
        "c-cpp-flylint.cppcheck.language": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "Force CppCheck to check all files as the given language."
        },
        "c-cpp-flylint.cppcheck.inconclusive": {
          "type": "boolean",
          "default": false,
          "description": "Allow reporting even though analysis is inconclusive. May lead to false positives."
        },
        "c-cpp-flylint.cppcheck.force": {
          "type": "boolean",
          "default": false,
          "description": "Controls whether CppCheck enumerates all possible configurations."
        },
        "c-cpp-flylint.cppcheck.severityLevels": {
          "type": "object",
          "description": "Maps the severity levels of CppCheck to VSCode severity levels (Error, Warning, Information, Hint). Setting to 'None' will not show the severity type at all.",
          "default": {
            "error": "Error",
            "warning": "Warning",
            "style": "Information",
            "performance": "Warning",
            "portability": "Warning",
            "information": "Information"
          },
          "properties": {
            "error": {
              "description": "Used when major issues are found.",
              "type": "string",
              "default": "Error",
              "enum": [
                "Error",
                "Warning",
                "Hint",
                "Information",
                "None"
              ]
            },
            "warning": {
              "description": "Suggestions about defensive programming to prevent potential issues.",
              "type": "string",
              "default": "Warning",
              "enum": [
                "Error",
                "Warning",
                "Hint",
                "Information",
                "None"
              ]
            },
            "style": {
              "description": "Stylistic issues related to code cleanup such as unused functions, redundant code, constness, etc.",
              "type": "string",
              "default": "Information",
              "enum": [
                "Error",
                "Warning",
                "Hint",
                "Information",
                "None"
              ]
            },
            "performance": {
              "description": "Suggestions for making the code faster. These suggestions only and may not increase execution speed.",
              "type": "string",
              "default": "Warning",
              "enum": [
                "Error",
                "Warning",
                "Hint",
                "Information",
                "None"
              ]
            },
            "portability": {
              "description": "Warnings about 64-bit and compiler portability.",
              "type": "string",
              "default": "Warning",
              "enum": [
                "Error",
                "Warning",
                "Hint",
                "Information",
                "None"
              ]
            },
            "information": {
              "description": "Minor issues that do not fit into other categories.",
              "type": "string",
              "default": "Information",
              "enum": [
                "Error",
                "Warning",
                "Hint",
                "Information",
                "None"
              ]
            }
          }
        },
        "c-cpp-flylint.flexelint.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable the Flexelint linter"
        },
        "c-cpp-flylint.flexelint.executable": {
          "type": "string",
          "description": "This option allows you to override the executable called when using Flexelint",
          "default": "flexelint"
        },
        "c-cpp-flylint.flexelint.configFile": {
          "type": "string",
          "description": "A .flexelint.rc file to use/fallback to if no config file is found in the current project",
          "default": ".flexelint.lnt"
        },
        "c-cpp-flylint.flexelint.headerArgs": {
          "type": "array",
          "description": "A list of arguments passed to Flexelint when scanning header source files",
          "default": [
            "-e749",
            "-e750",
            "-e751",
            "-e752",
            "-e753",
            "-e754",
            "-e1526",
            "-e1714"
          ]
        },
        "c-cpp-flylint.flexelint.severityLevels": {
          "type": "object",
          "description": "Maps the severity levels of Flexelint to VSCode severity levels (Error, Warning, Information, Hint). Setting to 'None' will not show the severity type at all.",
          "default": {
            "Error": "Error",
            "Warning": "Warning",
            "Info": "Information",
            "Note": "Hint"
          },
          "properties": {
            "Error": {
              "description": "Used when major issues are found.",
              "type": "string",
              "default": "Error",
              "enum": [
                "Error",
                "Warning",
                "Hint",
                "Information",
                "None"
              ]
            },
            "Warning": {
              "description": "Suggestions about defensive programming to prevent potential issues.",
              "type": "string",
              "default": "Warning",
              "enum": [
                "Error",
                "Warning",
                "Hint",
                "Information",
                "None"
              ]
            },
            "Info": {
              "description": "Suggestions for producing better code.",
              "type": "string",
              "default": "Information",
              "enum": [
                "Error",
                "Warning",
                "Hint",
                "Information",
                "None"
              ]
            },
            "Note": {
              "description": "Suggestions for producing better code.",
              "type": "string",
              "default": "Warning",
              "enum": [
                "Error",
                "Warning",
                "Hint",
                "Information",
                "None"
              ]
            }
          }
        }
      }
    }
  },
  "scripts": {
    "compile": "tsc -p ./",
    "watch": "tsc -w -p ./"
  },
  "devDependencies": {
    "@types/chai": "^4.1.3",
    "@types/chai-as-promised": "^7.1.0",
    "@types/mock-fs": "^3.6.30",
    "@types/node": "^13.7.0",
    "@types/vscode": "^1.41.0",
    "chai": "^4.1.2",
    "chai-as-promised": "^7.1.1",
    "mocha": "^7.0.1",
    "mocha-typescript": "^1.1.17",
    "mock-fs": "^4.5.0",
    "typescript": "^3.7.5",
    "vscode-test": "^1.3.0"
  },
  "dependencies": {
    "cross-spawn": "^6.0.5",
    "lodash": "^4.17.10",
    "slash": "^2.0.0",
    "fast-glob": "^2.2.6",
    "tmp": "^0.0.33",
    "var-expansion": "^0.1.0",
    "vscode-languageclient": "^5.1.0",
    "vscode-uri": "^2.0.3",
    "which": "^1.3.0"
  }
}
